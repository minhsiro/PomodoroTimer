main screen
- session title on top
- a circle timer (color == background session color);
- a loading bar
- a session counter
- a pause/resume button

- change theme toggle at corner
- a how to use button (has an exit button)


(there is 1 default pomodoro when load)
pomodoro list at bottom: Horizontal Scrollable Menu
- items (show title & session time/break), stored in local browser storage, max = 10
    pomodoro time, min 25, max 90
    break time, min 5, max 30
    title ,max 20 characters
    background, 3 color
    daily goal: 1-10
    music after each session and each break


- when user clicks on another session and main session clock is run, alert.
- if main session clock is not running, changes main session. (reset count???).
- if click change theme, change both theme, main & list.
- if click add while main clock is running, pause.
- if click delete, delete items from local storage., confirm with alert
- when click is running, only show pause/resume. if clock stop, show reset.
- if click reset, set timer to 0:0.
- if count == daily count, alert congratulations, set count back to 0.
- after a session, change to break. break has start break & skip break button.
- if session is on main screen, disable delete button.
- all buttons have hover state.

STATE DESIGN
state is localStorage

item state
- isOnMainScreen
- isSessionRunning
- isBreakRunning.
- title
- pomodoro time:{hour:0, minute: 0}
- break time
- daily goal
- session count
- music
- displayminute, displaysecond, displayprogesscount


Component
how to use component        Collapsed Sidepanel
main screen component (dark theme button, how to use button)

useReducer to handle actions
action play, pause, resume, reset, skip

toggle change theme                                                                      done
open/close how to use

desponsive design mobile                                                                 done
- disable hover
- smaller text

- delete 1 item at an given position in array
=> filter


App logic:
- when play/stop button is clicked, useEffect runs and go inside setInterval.
- after every second handleCount is called, state gets updated and triggers a re-render.
- useEffect will not be triggered every render because it is only called once when play/button is clicked and will be called again if sessionActive or BreakActive change.
- Meaning, setInterval in useEffect is still running after it was called the first time and will trigger a re-render after every second due to state changes but it will not block re-render due to it being ASYNCHRONOUS.

progress bar logic:
- using useRef to get progressCount value every render, to fill progress bar
- if it is session, max_width is session time. The same goes for break.
